HEX: F8400281
BINARY: 1111_1000_0100_0000_0000_0010_1000_0001
ARM: LDUR R1, [R20, #0]
HEX : 8B010022
BINARY: 1000_1011_0000_0001 _ 0000_0000_001 0_0010
ARM:  ADD R2, R1, R1
HEX: D1000333
BINARY: 1101_0001_0000_0000_0000_0011_0011_0011
ARM: SUBI R19, R25, #0
HEX: B40000E3
BINARY: 1011_0100_ 0000_0000_0000_0000_1110_0011
ARM: CBZ R3, #7
HEX: 91002294
BINARY: 1001_0001_0000_0000_0010_0010_1001_0100
ARM: ADDI R20, R20, #8
HEX: F81F4281
BINARY: 1111_1000_0001_1111_0100_ 0010_100 0_0001
ARM: STUR R1, [R20, #500]
HEX: 17FFFFFA
BINARY: 0001_0111_1111_1111_1111_1111_1111_1010
ARM: B #-6
HEX:14000041
BINARY: 0001_0100_0000_0000_0000_0000_0100_0001
ARM: B #-41
HEX:94000041
BINARY: 1001_0100_0000_0000_0000_0000_0100_0001
ARM: BL #-41
HEX: b4000821
BINARY: 1011_0100_0000_0000_0000_1000_0010_0001
ARMl CBZ X1, #41
HEX:B5000821
BINARY: 1011_0101_0000_0000_0000_1000_0010_0001
ARM: CBNZ X1, #-41
HEX: F819E2B1
BINARY: 1111_1000_0001_1001_1110_0010_1011_0001
AMR: LDUR R5,[ R9, #1]
HEX: F819E2B1
BINARY: 1111_1000_0001_1001_1110_0010_1011_0001
ARM: STUR R17,[R21, #41]
HEX: 8B150289
BINARY: 1000_1011_0001_0101_0000_0010_1000_1001
ARM: ADD R9,R20,R21
HEX: 8A100671
BINARY: 1000_1010_0001_0000_0000_0110_0111_0001
ARM: AND R17,R19,R16
HEX: AA1F17CC
BINARY: 1010_1010_0001_1111_0001_0111_1100_1100
ARM: ORR R12, R30, R31
HEX: EA0DAFAE
BINARY: 1110_1010_0000_1101_1010_1111_1010_1110
ARM: EOR R14,R29,R13
HEX: CB18012B
BINARY: 1100_1011_0001_1000_0000_0001_0010_1011
ARM: SUB R11, R9, R24
HEX: 910006D6
BINARY: 1001_0001_0000_0000_0000_0110_1101_0110
ARM: ADDI R22, R22, #1
HEX: 91150289
BINARY: 1001_0001_0001_0101_0000_0010_1000_1001
ARM: ANDI R9, R20, #1344
HEX: B208A6A8
BINARY: 1011_0010_0000_1000_1010_0110_1010_1000
ARM: ORRI R8, R21, #276
HEX: D200CA8C
BINARY: 1101_0010_0000_0000_1100_1010_1000_1100
ARM : EORI R12, R20, #50
HEX: D10868A7
BINARY: 1101_0001_0000_1000_0110_1000_1010_0111
ARM: SUBI R7, R5, #538
HEX: D289EF98
BINARY: 1101_0010_1000_1001_1110_1111_1001_1000
ARM: MOVZ X24, #20348



LDUR R1, [R20, #0] Memory Address R20 = decimal 5 = 32’b000000000000101 = 0x0000005, R1 GETS what’s in memory 0x00000005 so needs to have 5
ADD R2, R1, R1		R1 = 5 then R2 = 10
SUBI R19, R25, #0 	R25 = 15 then R19 = 15
ADDI R20, R20, #8	R20 = 5+8 = 13
STUR R1, [R20, #500] 513 = 0x00000201 so we need a block address 0x0201 and R1 stores the value of R1 =5 into 0x0201 
LDUR R5,[ R9, #1]
STUR R17,[R21, #41]
AND R17,R19,R16
ORR R12, R30, R31
EOR R14,R29,R13
SUB R11, R9, R24
ANDI R9, R20, #1344
ORRI R8, R21, #276
EORI R12, R20, #50
MOVZ X24, #20348
B #-6
BL #-41
CBZ R3, #7	R3 = 5 stop from branching
CBNZ X1, #-41

